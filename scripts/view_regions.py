#!/usr/bin/env python3
"""
Simple script to view existing layout analysis region pieces.

This script examines the output/regions/ directory and creates an HTML viewer
for the region images that have already been generated by the main processing pipeline.

Usage:
    python scripts/view_regions.py [page_number]

Examples:
    python scripts/view_regions.py        # View all pages
    python scripts/view_regions.py 5      # View only page 5
"""

import sys
from pathlib import Path
from typing import List, Dict, Any, Optional
import re


def parse_filename(filename: str) -> Dict[str, Any]:
    """Parse region filename to extract metadata."""
    # Format: p{page}_idx{index}_{type}_conf{confidence}_{bbox}.jpg
    # Example: p005_idx000_text_conf97_585-489-1036-587.jpg

    pattern = r"p(\d+)_idx(\d+)_([^_]+)_conf(\d+)_(\d+)-(\d+)-(\d+)-(\d+)\.jpg"
    match = re.match(pattern, filename)

    if match:
        page, idx, element_type, conf, x1, y1, x2, y2 = match.groups()
        return {
            "page": int(page),
            "index": int(idx),
            "type": element_type,
            "confidence": int(conf) / 100.0,
            "bbox": [int(x1), int(y1), int(x2), int(y2)],
            "area": (int(x2) - int(x1)) * (int(y2) - int(y1)),
            "filename": filename,
        }

    return None


def get_color_for_type(element_type: str) -> str:
    """Get color for element type."""
    colors = {
        "text": "#FF6B6B",  # Red
        "title": "#4ECDC4",  # Teal
        "table": "#45B7D1",  # Blue
        "tablebody": "#45B7D1",  # Blue
        "tablecaption": "#96CEB4",  # Light green
        "figure": "#FECA57",  # Yellow
        "imagebody": "#FECA57",  # Yellow
        "imagecaption": "#DDA0DD",  # Plum
        "equation": "#FF9FF3",  # Pink
        "interlineequation_layout": "#FF9FF3",  # Pink
        "interlineequationnumber_layout": "#FFB6C1",  # Light pink
        "abandon": "#808080",  # Gray
        "unknown": "#C0C0C0",  # Light gray
    }

    element_type = element_type.lower()
    for key in colors:
        if key in element_type:
            return colors[key]
    return colors["unknown"]


def analyze_regions(
    regions_dir: Path, page_filter: Optional[int] = None
) -> Dict[str, Any]:
    """Analyze existing region files."""
    if not regions_dir.exists():
        return {"pages": {}, "total_regions": 0, "error": "Regions directory not found"}

    pages_data = {}
    total_regions = 0

    # Process each page directory
    for page_dir in sorted(regions_dir.iterdir()):
        if not page_dir.is_dir():
            continue

        # Extract page number from directory name (page_001, page_002, etc.)
        page_match = re.match(r"page_(\d+)", page_dir.name)
        if not page_match:
            continue

        page_num = int(page_match.group(1))

        # Skip if filtering for specific page
        if page_filter is not None and page_num != page_filter:
            continue

        # Process region files in this page
        regions = []
        stats = {}

        for region_file in sorted(page_dir.glob("*.jpg")):
            region_data = parse_filename(region_file.name)
            if region_data:
                regions.append(region_data)
                total_regions += 1

                # Update statistics
                element_type = region_data["type"]
                if element_type not in stats:
                    stats[element_type] = {"count": 0, "total_conf": 0, "avg_conf": 0}

                stats[element_type]["count"] += 1
                stats[element_type]["total_conf"] += region_data["confidence"]
                stats[element_type]["avg_conf"] = (
                    stats[element_type]["total_conf"] / stats[element_type]["count"]
                )

        if regions:
            pages_data[page_num] = {
                "regions": regions,
                "stats": stats,
                "total_regions": len(regions),
                "directory": str(page_dir),
            }

    return {
        "pages": pages_data,
        "total_regions": total_regions,
        "total_pages": len(pages_data),
    }


def generate_html_viewer(analysis_data: Dict[str, Any], output_path: Path) -> None:
    """Generate HTML viewer for region images."""
    html = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Layout Analysis Region Viewer</title>
    <style>
        body { font-family: system-ui, -apple-system, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1400px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 30px; }
        .summary { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .page-section { background: white; margin: 20px 0; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .page-header { border-bottom: 2px solid #eee; padding-bottom: 15px; margin-bottom: 20px; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 6px; border-left: 4px solid; }
        .regions-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 20px; margin: 20px 0; }
        .region-card { background: #fff; border: 1px solid #ddd; border-radius: 6px; padding: 15px; transition: transform 0.2s; }
        .region-card:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
        .region-preview { width: 100%; max-height: 180px; object-fit: contain; border-radius: 4px; margin-bottom: 10px; background: #f9f9f9; }
        .region-info { font-size: 14px; }
        .region-type { font-weight: bold; font-size: 16px; margin-bottom: 8px; }
        .confidence { font-weight: bold; }
        .confidence.high { color: #28a745; }
        .confidence.medium { color: #ffc107; }
        .confidence.low { color: #dc3545; }
        .bbox-info { font-family: monospace; font-size: 12px; color: #666; margin: 5px 0; }
        .color-legend { display: flex; flex-wrap: wrap; gap: 15px; margin: 15px 0; }
        .color-item { display: flex; align-items: center; gap: 8px; }
        .color-box { width: 24px; height: 24px; border-radius: 4px; border: 1px solid #ddd; }
        .filter-controls { margin: 20px 0; }
        .filter-button { background: #007bff; color: white; border: none; padding: 8px 16px; margin: 4px; border-radius: 4px; cursor: pointer; }
        .filter-button:hover { background: #0056b3; }
        .filter-button.active { background: #28a745; }
        .hidden { display: none; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç Layout Analysis Region Viewer</h1>
            <p>Viewing extracted regions from layout analysis</p>
        </div>
"""

    # Add summary
    total_pages = analysis_data.get("total_pages", 0)
    total_regions = analysis_data.get("total_regions", 0)

    html += f"""
        <div class="summary">
            <h2>üìä Summary</h2>
            <p><strong>Total Pages:</strong> {total_pages} | <strong>Total Regions:</strong> {total_regions}</p>
        </div>
"""

    # Add color legend
    html += """
        <div class="summary">
            <h3>üé® Element Type Colors</h3>
            <div class="color-legend">
"""

    # Collect all element types from the data
    all_types = set()
    for page_data in analysis_data["pages"].values():
        for region in page_data["regions"]:
            all_types.add(region["type"])

    for element_type in sorted(all_types):
        color = get_color_for_type(element_type)
        html += f'<div class="color-item"><div class="color-box" style="background-color: {color};"></div><span>{element_type}</span></div>'

    html += """
            </div>
        </div>
"""

    # Add filter controls
    html += """
        <div class="summary">
            <h3>üîß Filters</h3>
            <div class="filter-controls">
                <button class="filter-button active" onclick="filterByType('all')">All</button>
"""

    for element_type in sorted(all_types):
        html += f'<button class="filter-button" onclick="filterByType(\'{element_type}\')">{element_type}</button>'

    html += """
            </div>
        </div>
"""

    # Add page sections
    for page_num in sorted(analysis_data["pages"].keys()):
        page_data = analysis_data["pages"][page_num]

        html += f"""
        <div class="page-section">
            <div class="page-header">
                <h2>üìÑ Page {page_num}</h2>
                <p>Total regions: {page_data["total_regions"]}</p>
            </div>
            
            <h3>üìà Statistics</h3>
            <div class="stats-grid">
"""

        for element_type, stats in sorted(page_data["stats"].items()):
            color = get_color_for_type(element_type)
            html += f"""
                <div class="stat-card" style="border-left-color: {color};">
                    <div style="color: {color}; font-weight: bold;">{element_type}</div>
                    <div>Count: {stats["count"]}</div>
                    <div>Avg Confidence: {stats["avg_conf"]:.3f}</div>
                </div>
"""

        html += f"""
            </div>
            
            <h3>üñºÔ∏è Regions</h3>
            <div class="regions-grid">
"""

        # Sort regions by index
        for region in sorted(page_data["regions"], key=lambda x: x["index"]):
            conf_class = (
                "high"
                if region["confidence"] > 0.8
                else "medium"
                if region["confidence"] > 0.5
                else "low"
            )
            color = get_color_for_type(region["type"])

            html += f"""
                <div class="region-card" data-type="{region["type"]}">
                    <img src="regions/page_{page_num:03d}/{region["filename"]}" alt="Region {region["index"]}" class="region-preview">
                    <div class="region-info">
                        <div class="region-type" style="color: {color};">#{region["index"]} - {region["type"]}</div>
                        <div class="confidence {conf_class}">Confidence: {region["confidence"]:.3f}</div>
                        <div class="bbox-info">BBox: [{region["bbox"][0]}, {region["bbox"][1]}, {region["bbox"][2]}, {region["bbox"][3]}]</div>
                        <div class="bbox-info">Size: {region["bbox"][2] - region["bbox"][0]}√ó{region["bbox"][3] - region["bbox"][1]} px</div>
                        <div class="bbox-info">Area: {region["area"]} px¬≤</div>
                    </div>
                </div>
"""

        html += """
            </div>
        </div>
"""

    # Add JavaScript for filtering
    html += """
    </div>
    
    <script>
        function filterByType(type) {
            const cards = document.querySelectorAll('.region-card');
            const buttons = document.querySelectorAll('.filter-button');
            
            // Update button states
            buttons.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Filter cards
            cards.forEach(card => {
                if (type === 'all' || card.dataset.type === type) {
                    card.classList.remove('hidden');
                } else {
                    card.classList.add('hidden');
                }
            });
        }
    </script>
</body>
</html>
"""

    output_path.write_text(html, encoding="utf-8")


def main():
    """Main function."""
    # Parse command line arguments
    page_filter = None
    if len(sys.argv) > 1:
        try:
            page_filter = int(sys.argv[1])
        except ValueError:
            print(f"‚ùå Invalid page number: {sys.argv[1]}")
            return

    # Check for regions directory
    regions_dir = Path("output/regions")
    if not regions_dir.exists():
        print("‚ùå No regions directory found at output/regions/")
        print("   Run the main processing pipeline first to generate region images.")
        return

    print(f"üîç Analyzing existing region images...")
    if page_filter:
        print(f"   üìÑ Filtering for page {page_filter}")

    # Analyze regions
    analysis_data = analyze_regions(regions_dir, page_filter)

    if "error" in analysis_data:
        print(f"‚ùå Error: {analysis_data['error']}")
        return

    if analysis_data["total_regions"] == 0:
        print("‚ùå No region images found.")
        if page_filter:
            print(f"   Try without page filter or check if page {page_filter} exists.")
        return

    # Print summary
    print(
        f"‚úÖ Found {analysis_data['total_regions']} regions across {analysis_data['total_pages']} pages"
    )

    for page_num in sorted(analysis_data["pages"].keys()):
        page_data = analysis_data["pages"][page_num]
        print(f"   üìÑ Page {page_num}: {page_data['total_regions']} regions")

        # Show top element types
        top_types = sorted(
            page_data["stats"].items(), key=lambda x: x[1]["count"], reverse=True
        )[:3]
        type_summary = ", ".join([f"{t[0]}({t[1]['count']})" for t in top_types])
        print(f"      Top types: {type_summary}")

    # Generate HTML viewer
    output_path = Path("output/regions_viewer.html")
    generate_html_viewer(analysis_data, output_path)

    print(f"\n‚úÖ HTML viewer generated: {output_path}")
    print("   Open this file in your browser to view the regions interactively.")


if __name__ == "__main__":
    main()
